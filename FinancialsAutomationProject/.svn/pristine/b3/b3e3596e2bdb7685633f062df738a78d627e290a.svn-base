package krawler.erp.page;

import java.awt.AWTException;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import krawler.erp.utils.SikulliUtil;

public class ExportFunction {

	public static void Export_TodayDate(String buttonName, String reportIcon, String waitForQuickSearch, String closeReportPage, String ModuleName, WebDriver driver) throws InterruptedException, AWTException, IOException
	{
	try {	
						
			WebDriverWait wait = new WebDriverWait(driver, 60);
			Properties pro = Utilities.fetchProValue("OR_ExportFunction.properties");
			
			String ExportButtonName=null;
			
			if(buttonName.equalsIgnoreCase("Export List")){
				ExportButtonName="Export List";
			}
			else if(buttonName.equalsIgnoreCase("Export")){
				ExportButtonName="Export ";
			}
			
			WebElement element =wait.until(ExpectedConditions.elementToBeClickable(By.xpath(reportIcon)));
			element.click();
			Thread.sleep(1000);				
			
			Utilities.clickCheckBox(waitForQuickSearch, "uncheck", driver);
			
			//select from date
			Utilities.HoverandClick(pro.getProperty("fromIcon"), driver);
			Utilities.HoverandClick(pro.getProperty("selectToday"), driver);
			Thread.sleep(1000);				

			//select To date
			Utilities.HoverandClick(pro.getProperty("toIcon"), driver);
			Utilities.HoverandClick(pro.getProperty("selectToday"), driver);
			Thread.sleep(1000);	
			
			Utilities.clickButton("Fetch", 500, driver);
			Thread.sleep(1000);			
		try	{						
			Utilities.clickCheckBox(waitForQuickSearch, "check" , driver);
			
			// ****** CSV FILE *****
			Utilities.clickButton(ExportButtonName, 500, driver);								
			Utilities.HoverandClick(pro.getProperty("ExportToCSV"), driver);		
			element =wait.until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("WindowExportBtn"))));
			element.click();
			Thread.sleep(1000);
			SikulliUtil.sikulli_waitClick(driver, "CSVtype");
			SikulliUtil.sikulli_waitClick(driver, "ClsX");				
			System.out.println("* * * * * * EXPORT for [.CSV] completed successfully * * * * * * *");			
			Thread.sleep(1500);			
			
			// PDF 
			Utilities.clickButton(ExportButtonName, 500, driver);			
			String parentWindow=driver.getWindowHandle();
			Utilities.HoverandClick(pro.getProperty("ExportToPDF"), driver);
			element =wait.until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("pdfTemplate"))));
			element.click();			
			Thread.sleep(1000);			
			element =wait.until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("WindowExportBtn"))));
			element.click();			
			Thread.sleep(1000);
			SikulliUtil.sikulli_waitClick(driver, "PDFtype");
			Thread.sleep(1500);			
			Set s=driver.getWindowHandles(); //this method will gives you the handles of all opened windows
			Iterator ite=s.iterator();
			while(ite.hasNext())
			{
			    String childWindow=ite.next().toString();
			    if(!childWindow.contains(parentWindow))
			    {
			        driver.switchTo().window(childWindow);				    
			        Thread.sleep(1000);
			        System.out.println("* * * * * * EXPORT for [PDF] completed successfully * * * * * * *");
			        driver.close();
			        driver.switchTo().window(parentWindow);
			        Thread.sleep(1000);
			    }
			}
			
			// Excel in Details
			Utilities.clickButton(ExportButtonName, 500, driver);			
			Actions action = new Actions(driver);
			WebElement hoverElement = new WebDriverWait(driver,30).until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("ExportToExcel"))));
			action.moveToElement(hoverElement).build().perform();
			Thread.sleep(1000);			
			Utilities.HoverandClick(pro.getProperty("ExcelInDetail"), driver);			
			element =wait.until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("WindowExportBtn"))));
			element.click();			
			Thread.sleep(1000);
			SikulliUtil.sikulli_waitClick(driver, "XLStype");
			SikulliUtil.sikulli_waitClick(driver, "ClsX");		
			System.out.println("* * * * * * EXPORT for [.Excel in Detail ] completed successfully * * * * * * *");			
			Thread.sleep(1500);			
			
			// Excel Summary 
			Utilities.clickButton(ExportButtonName, 500, driver);		
			hoverElement = new WebDriverWait(driver,30).until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("ExportToExcel"))));
			action.moveToElement(hoverElement).build().perform();
			Thread.sleep(1000);			
			Utilities.HoverandClick(pro.getProperty("ExcelInSummary"), driver);			
			element =wait.until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("WindowExportBtn"))));
			element.click();			
			Thread.sleep(1000);
			SikulliUtil.sikulli_waitClick(driver, "XLStype");
			SikulliUtil.sikulli_waitClick(driver, "ClsX");			
			System.out.println("* * * * * * EXPORT for [.Excel Summary ] completed successfully * * * * * * *");			
			Thread.sleep(1500);						
						
			// Export to HTML
			Utilities.clickButton(ExportButtonName, 500, driver);			
			parentWindow=driver.getWindowHandle();			
			Utilities.HoverandClick(pro.getProperty("ExportToHtml"), driver);
			Utilities.clickButton("Print", 1000, driver);						
			s=driver.getWindowHandles(); //this method will gives you the handles of all opened windows
			ite=s.iterator();
			while(ite.hasNext())
			{
			    String childWindow=ite.next().toString();
			    if(!childWindow.contains(parentWindow))
			    {
			        driver.switchTo().window(childWindow);
			        driver.manage().window().maximize();
			        Thread.sleep(1000);
			        System.out.println("* * * * * * EXPORT with [Print] completed successfully * * * * * * *");
			        driver.close();
			        driver.switchTo().window(parentWindow);
			        Thread.sleep(1500);
			    }
			}
				// Exported
			
				Utilities.HoverandClick(closeReportPage, driver);
				System.out.println("* * * * * * EXPORT for module ["+ModuleName+"] completed successfully * * * * * * *");								
				}	
		
				catch(Exception noData){
				System.out.println("* * * * * * Today's data are Not Present ! ! ! * * * * * * ");
				Utilities.handleError(noData, driver);
				}
			}
	
			catch (Exception EX) 
			{
				System.out.println("* * * * * * !!!!!!! EXPORT for ["+ModuleName+"] FAILED !!!!!! * * * * * * *");			
				Utilities.handleError(EX, driver);
			}
			
	}	
					

	  // get button path for Sikulli
       public static String button_path(String BtnName) {
    	   
			String file_path = System.getProperty("user.dir")+"\\sikulliSnaps\\ExportSnap\\Common\\"+ BtnName +".PNG";
			return file_path;

       }
	
	
/*		// Check or Uncheck checkBox button
		public static void clickCheckBoxExport(String checkBoxXpath, String chkOrUnchk, WebDriver driver) throws InterruptedException
		{
			WebElement chkBox=
			new WebDriverWait(driver, 10).ignoring(StaleElementReferenceException.class).until(ExpectedConditions.elementToBeClickable(By.xpath(checkBoxXpath)));

			if(chkBox.isEnabled())
			{
				Thread.sleep(1300);
				if(chkOrUnchk.equalsIgnoreCase("CHECK"))
				{
					if(!chkBox.isSelected())
					{
						chkBox.click();
						Thread.sleep(1500);
					}
				}
				else if(chkOrUnchk.equalsIgnoreCase("UNCHECK"))
				{
					if(chkBox.isSelected())
					{
						chkBox.click();
						Thread.sleep(1000);
					}
				}
			}
		}
*/	
}
