package krawler.erp.inventory;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Properties;
import java.util.Set;
import java.io.File;
import java.io.FileWriter;
import java.io.FileReader; 
import java.io.BufferedReader;

import krawler.erp.page.Utilities;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.sikuli.script.Pattern;
import org.sikuli.script.Screen;

import com.google.common.base.Function;

import java.util.concurrent.TimeUnit;

public class StockAdjustment {
	
	
	// ********************************************************StockAdjustment Creation*********************************************************
			public static void create_StockAdjustmentReasonMasterItem(String reason, WebDriver driver) throws InterruptedException, AWTException, IOException {
			
				try {
					
					final Properties pro = Utilities.fetchProValue("OR_StockAdjustment.properties");
					Utilities.refresh();
					FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(15, TimeUnit.SECONDS).pollingEvery(2, TimeUnit.SECONDS);
					// ** TO DO **  Fix for selected expand menu
//				    WebElement element = wait.until(new Function<WebDriver, WebElement>() {
//							public WebElement apply(WebDriver webDriverArg) {
//								// find the element
//								return webDriverArg.findElement(By.xpath(pro.getProperty("LeftPaneMenuExpander")));
//							}
//						});
//				    element.click();
					WebElement element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {
								return webDriverArg.findElement(By.xpath(pro.getProperty("MastersExpander")));
							}
						});
				    element.click();
//				    element = wait.until(new Function<WebDriver, WebElement>() {
//						public WebElement apply(WebDriver webDriverArg) {
//								return webDriverArg.findElement(By.xpath(pro.getProperty("MastersConfigurationLink")));
//							}
//						});
				    element = wait.until(new Function<WebDriver, WebElement>() {
					public WebElement apply(WebDriver webDriverArg) {
							return webDriverArg.findElement(By.xpath(pro.getProperty("MastersConfigurationLink")));
						}
					});
				    element.click();
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("QuickSearchInput")));
						}
					});
				    element.click();
				    element.sendKeys("Stock Adjustment Reason");
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjReasonSelect")));
						}
					});
				    element.click();
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("MasterMenuItemButton")));
						}
					});
				    element.click();
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("AddStockAdjReasonImage")));
						}
					});
				    element.click();
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentReasonValue")));
						}
					});
				    element.click();
				    element.sendKeys(reason);
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentReasonSaveBtn")));
						}
					});
				    element.click();
//				    element = wait.until(new Function<WebDriver, WebElement>() {
//						public WebElement apply(WebDriver webDriverArg) {							 
//							return webDriverArg.findElement(By.xpath(pro.getProperty("MasterConfigurationOKButton")));
//						}
//					});
//				    element.click();
				    Thread.sleep(2000);
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(".//*[@class='x-window-mc']/div/div/div[2]/span"));
						}
					});
				    if(element.getText().equalsIgnoreCase("Master item has been saved successfully")){
				    		System.out.println(reason + " Master item has been saved successfully");	
				    	
				    } else if(element.getText().equalsIgnoreCase(reason+":Master item entry already exists.")){
				    	System.out.println(reason + ":Master item entry already exists.");
				    }
				    new WebDriverWait(driver, 30).until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("MasterConfigurationOKButton"))));
					driver.findElement(By.xpath(pro.getProperty("MasterConfigurationOKButton"))).click();
					
				    element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(pro.getProperty("MasterConfigurationClose")));
						}
					});
				    element.click();
				    
				    
				} catch (Exception EX) {
					Utilities.handleError(EX, driver);
				}
			}

//******************************** Stock In ********************************			
public static void createStockAdjustment_StockIn(String documentid,String productid, String batchValue,String serialSeq,String quanityValue, String perUnitPrice, boolean qaApprovalFlow, WebDriver driver) throws InterruptedException, AWTException, IOException{
	
	try{
		 final Properties pro = Utilities.fetchProValue("OR_StockAdjustment.properties");
		 documentid="StockIN"+documentid;
		 String adjustmentTypeValue="Stock IN";
		 InvUtilities.expandInventory(driver);
		 InvUtilities.expandEntry(driver);
		 Utilities.waitandClick(pro.getProperty("StockAdjustmentLink"), driver);
		 Thread.sleep(1500);
		 Utilities.clickExpander(driver);
		 
		 Utilities.enterTextandSelect("DS - Default Store", "//input[@id='fromstoremarkoutallmarkoutTab']", driver);
		 Utilities.enterTextandSelect("NA", pro.getProperty("StockAdjustmentSequenceFormat"), driver);
		 Utilities.enterTextNormalBox(documentid, pro.getProperty("StockAdjustmentDocumentId"), driver);
		 String memoText=adjustmentTypeValue + " Against " + productid;
		 WebElement memo=driver.findElement(By.xpath(pro.getProperty("StockAdjustmentMemo")));
		 memo.sendKeys(memoText);
		 // Select 1st reason
		 Utilities.HoverandClick("//*[@id='reason']/following::img[1]", driver);
		 Utilities.HoverandClick("//*[@class='x-layer x-combo-list ' and contains(@style,'visible')]/div/div[2]", driver);

		 Utilities.HoverandClick(pro.getProperty("StockAdjustmentAddPrdButton"), driver);
		 Utilities.isLoadingDisappear(120, driver);
		 Utilities.enterTextNormalBox(productid, pro.getProperty("StockAdjustmentSearch"), driver);
		 Utilities.isLoadingDisappear(60, driver);
		 Utilities.clickCheckBox(pro.getProperty("SelectProductS"), "check", driver);	
		 int totalProducts=Utilities.totalSize(pro.getProperty("TotalFindProducts"), driver);
		 Utilities.HoverandClick(pro.getProperty("StockAdjustmentAddButton"), driver);
		 Thread.sleep(1500);
		 
		 int headerSize=Utilities.totalSize("//*[text()='Adjustment Type']/ancestor::tr/td/div", driver);
		 int indOfprdid=0, indOfadjTyp=0, indOfqty=0;
		 for(int i=1; i<=headerSize ; i++)
		 {
			 String headerName=driver.findElement(By.xpath("//*[text()='Adjustment Type']/ancestor::tr/td["+i+"]/div")).getText();
			 if(headerName.equalsIgnoreCase("Product ID")){
				 indOfprdid=i;
			 }
			 if(headerName.equalsIgnoreCase("Adjustment Type")){
				 indOfadjTyp=i;
			 }
			 if(headerName.equalsIgnoreCase("Quantity")){
				 indOfqty=i;
			 }	
		 }
		 
		 for(int i=1; i<=totalProducts ;i++)
		 {
			 //enter Addj type
			 Utilities.HoverandClick("//*[text()='Adjustment Type']/ancestor::div[3]/following::div[1]/div[1]/div["+i+"]/table/tbody/tr/td["+indOfadjTyp+"]/div", driver);
			 Utilities.HoverandClick("//*[@class='x-layer x-editor x-small-editor x-grid-editor' and contains(@style,'visible')]//input[@type='text']/following::img[1]", driver);
			 Utilities.HoverandClick("//*[contains(@style,'visible')]//*[text()='Stock IN']", driver);
			 memo.click();
			 //enter Quantity
			 Utilities.HoverandClick("//*[text()='Adjustment Type']/ancestor::div[3]/following::div[1]/div[1]/div["+i+"]/table/tbody/tr/td["+indOfqty+"]/div", driver);
			 Utilities.enter_LinelabelAmount(quanityValue, driver);
			 memo.click();
		 }
		 
		 // enter location & serial
		 for(int i=1; i<=totalProducts ; i++)
		 {
			 int locHeaderSize=0;
			 String headerName=null;
			 Utilities.HoverandClick("//*[text()='Adjustment Type']/ancestor::div[3]/following::div[1]/div[1]/div["+i+"]/table/tbody/tr/td//div[@class='pwnd serialNo-gridrow']", driver);
			 
			 locHeaderSize=Utilities.totalSize("//*[text()='Location']/ancestor::tr/td/div", driver);
			 for(int j=1; j<=locHeaderSize; j++){
				 headerName=driver.findElement(By.xpath("//*[text()='Location']/ancestor::tr/td["+j+"]/div")).getText();
				 if(headerName.equalsIgnoreCase("Location")){
					 Utilities.HoverandClick("//*[text()='Location']/ancestor::div[3]/following::div[1]/div/div/table/tbody/tr/td["+j+"]/div", driver);
					 Utilities.enterTextandSelect("Default Location", "//*[@id='tolocationid']/following::input[1]", driver);
				 }
			 }
		
		// Enter Qauntity
			 for(int j=1; j<=locHeaderSize; j++){
				 headerName=driver.findElement(By.xpath("//*[text()='Location']/ancestor::tr/td["+j+"]/div")).getText();
				 if(headerName.equalsIgnoreCase("Quantity")){
					 Utilities.HoverandClick("//*[text()='Location']/ancestor::div[3]/following::div[1]/div/div/table/tbody/tr/td["+j+"]/div", driver);
					 Utilities.enter_LinelabelAmount(quanityValue, driver);
					 Utilities.enter_LinelabelAmount_thenEnter(driver);
				 }
			 }	 
		// Enter Batch Number
			 for(int j=1; j<=locHeaderSize; j++){
				 headerName=driver.findElement(By.xpath("//*[text()='Location']/ancestor::tr/td["+j+"]/div")).getText();
				 if(headerName.equalsIgnoreCase("Batch")){
					 Utilities.HoverandClick("//*[text()='Location']/ancestor::div[3]/following::div[1]/div/div/table/tbody/tr/td["+j+"]/div", driver);
					 Utilities.enter_LinelabelAmount(batchValue, driver);
					 Utilities.enter_LinelabelAmount_thenEnter(driver);
				 }
			 }
			 
		// Enter Serial Number
			 for(int j=1; j<=locHeaderSize; j++){
				 headerName=driver.findElement(By.xpath("//*[text()='Location']/ancestor::tr/td["+j+"]/div")).getText();
				 if(headerName.equalsIgnoreCase("Serial")){					 
					 for(int serialNo=1; serialNo<=Integer.parseInt(quanityValue) ; serialNo++){
						 Utilities.HoverandClick("//*[text()='Location']/ancestor::div[3]/following::div[1]/div/div["+serialNo+"]/table/tbody/tr/td["+j+"]/div", driver);
						 Utilities.enter_LinelabelAmount(serialSeq+serialNo, driver);
//						 Utilities.enter_LinelabelAmount_thenEnter(driver);
					 }					 
				 }
			 } 
			 Utilities.HoverandClick("//*[@class='x-window-footer']//*[text()='Submit']", driver);
			 Thread.sleep(1000);
		 }
		 
		 // Unit Price
		 	Thread.sleep(1000);
		    String xpathOfelement = "//*[text()='Product ID']/ancestor::div[3]/following::div[1]/div/div[1]/table/tbody//*[@class='pwnd delete-gridrow']";
			Utilities.justHover(xpathOfelement , driver);
			Thread.sleep(1000);
			 int indOfUnitPrice=0;
			 for(int i=1; i<=headerSize ; i++)
			 {
				 String headerName=driver.findElement(By.xpath("//*[text()='Adjustment Type']/ancestor::tr/td["+i+"]/div")).getText();
				 if(headerName.equalsIgnoreCase("Per Unit Price")){
					 indOfUnitPrice=i;
				 }
			 } 
			 
			 for(int i=1; i<=totalProducts ;i++)
			 {
				 //enter Price
				 Utilities.HoverandClick("//*[text()='Adjustment Type']/ancestor::div[3]/following::div[1]/div[1]/div["+i+"]/table/tbody/tr/td["+indOfUnitPrice+"]/div", driver);
				 Utilities.enter_LinelabelAmount(perUnitPrice, driver);
				 memo.click();
			 }
			 
		String mainWindow=driver.getWindowHandle(); 
		List<String> StockAdjustmentForApprovalList = new ArrayList<String>();
		Utilities.clickButton("Save", 500, driver);	 
		Utilities.clickButton("Yes", 500, driver);	 
		// without QA
		if(qaApprovalFlow==false){
			Utilities.clickButton("No", 1000, driver);
		}
		// with QA flow
		if(qaApprovalFlow==true)
		{
			Utilities.clickButton("Yes", 1000, driver);
			Thread.sleep(1000);
			int serialColumnIndex=0,productColumnIndex=0,batchColumnIndex=0;
			WebElement serial=null;
			StringBuilder stb=new StringBuilder();
			stb.append("Serial,Product,Batch");
			for (serialColumnIndex = 1; serialColumnIndex <= driver.findElements(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); serialColumnIndex++) {
				if (driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ serialColumnIndex + "]/div")).getText().equalsIgnoreCase("Serial")) {
					break;
				}
			}
			for (productColumnIndex = 1; productColumnIndex <= driver.findElements(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); productColumnIndex++) {
				if (driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ productColumnIndex + "]/div")).getText().equalsIgnoreCase("Product")) {
					break;
				}
			}
			for (batchColumnIndex = 1; batchColumnIndex <= driver.findElements(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); batchColumnIndex++) {
				if (driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ batchColumnIndex + "]/div")).getText().equalsIgnoreCase("Batch")) {
					break;
				}
			}			
			
			StockAdjustmentForApprovalList.add(stb.toString());
			//String[] selectStockAdjustmentForApprovalRecords = new String[Integer.parseInt(quanityValue)];
			for (int selectOutCount = 1; selectOutCount <=(Integer.parseInt(quanityValue)*2) ; selectOutCount++) {
				serial = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td[1]/div/div"));
				serial.click();
				String selectedSerialNoForApproval = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td["+ serialColumnIndex + "]/div")).getText();
				String selectedBatchNo = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td["+ batchColumnIndex + "]/div")).getText();
				String selectedProductID = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td["+ productColumnIndex + "]/div")).getText();
				stb.setLength(0);
				stb.append(selectedSerialNoForApproval).append(",").append(selectedProductID).append(",").append(selectedBatchNo);
				StockAdjustmentForApprovalList.add(stb.toString());
			}			
			Utilities.HoverandClick(pro.getProperty("StockAdjustmentQAFlowSaveBtn"), driver);
		}// close QA flow
		
			WebElement buttonOk=new WebDriverWait(driver,40).until(ExpectedConditions.elementToBeClickable(By.xpath("//button[text()='OK']")));
			if(buttonOk.isDisplayed())
			{
				Thread.sleep(1000);
				String[] array = StockAdjustmentForApprovalList.toArray(new String[0]);
				writeSerialsToFile(documentid+"StockINApprovalserials"+Utilities.currentDate("dd-MM-yyyy")+".txt",array);						
											
				Utilities.clickButton("OK", 1000, driver);
				Thread.sleep(5000);
				
				try{
				Utilities.sikuliHandle("Print_Cancel");
				Thread.sleep(3000);}
				catch(Exception ex){
					
				}
				
				Set s=driver.getWindowHandles(); //this method will gives you the handles of all opened windows
				Iterator ite=s.iterator();
				while(ite.hasNext())
				{
				    String popupHandle=ite.next().toString();
				    if(!popupHandle.contains(mainWindow))
				    {
				        driver.switchTo().window(popupHandle);
				        driver.close(); //close print popup
				        driver.switchTo().window(mainWindow);
				        Thread.sleep(2000);
				        break;
				    }
				}
				 Thread.sleep(500);
			}
			
		Utilities.HoverandClick(pro.getProperty("StockAdjustmentCloseBtn"), driver);	
		System.out.println("****** Stock In for ["+documentid+"] with Qauntity ["+quanityValue+"] is successfully created ******");	
			
	}
	catch(Exception Ex){
		System.out.println("!!!!!!!! FAILED to create Stock In for ["+documentid+"] with Qauntity ["+quanityValue+"] !!!!!!!!");	
		Utilities.handleError(Ex, driver);
	}
	
}
			
			
		
		// ********************************************************StockAdjustment Creation*********************************************************
		public static void create_StockAdjustment(String documentid,String productid, String batchValue,String serialSeq,String quanityValue, String perUnitPrice, boolean qaApprovalFlow, WebDriver driver) throws InterruptedException, AWTException, IOException {
		
			try {
				final Properties pro = Utilities.fetchProValue("OR_StockAdjustment.properties");
				
				documentid="StockIN"+documentid;
				String adjustmentTypeValue="Stock IN";

				FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(5, TimeUnit.SECONDS).pollingEvery(2, TimeUnit.SECONDS);
			    WebElement element = null;
			    InvUtilities.enableExpander(driver);
				InvUtilities.expandInventory(driver);
				InvUtilities.expandEntry(driver);
				
				Utilities.HoverandClick(pro.getProperty("StockAdjustmentLink"), driver);
			    Utilities.clickExpander(driver);
			    Thread.sleep(1500);
			    
			    InvUtilities.selectFromNormalDropDown("DS - Default Store", "//input[@id='fromstoremarkoutallmarkoutTab']", driver);
			    InvUtilities.selectFromNormalDropDown("NA", pro.getProperty("StockAdjustmentSequenceFormat"), driver);
			    Utilities.enterTextNormalBox(documentid, pro.getProperty("StockAdjustmentDocumentId"), driver);
			    
			    String memoText=adjustmentTypeValue + " Against " + productid;
			    Utilities.enterTextNormalBox(memoText, pro.getProperty("StockAdjustmentMemo"), driver);
				
			    WebElement reason = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(pro.getProperty("StockAdjustmentReason")))); 
			    reason.click();
	  			Thread.sleep(2000);
	  			Robot reasonRobot=new Robot();
	  			
	  			Utilities.sendText("REASON");
	  			Thread.sleep(2000);
	  			reasonRobot.keyPress(KeyEvent.VK_ENTER);
	  			reasonRobot.keyRelease(KeyEvent.VK_ENTER);
	  			Thread.sleep(2000);
	  			
			    Thread.sleep(2000);
			    element = wait.until(new Function<WebDriver, WebElement>() {

					// apply method- which accept webdriver as input
//		    	    @Override
					public WebElement apply(WebDriver webDriverArg) {
						// find the element
						return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentAddPrdButton")));
					}
				});
			    element.click();
			    
			    Thread.sleep(1500);
				Utilities.clickCheckBox(pro.getProperty("firstProduct"), "uncheck", driver);
				Utilities.enterTextNormalBox(productid, pro.getProperty("StockAdjustmentSearch"), driver);
				Thread.sleep(3000);
				Utilities.clickCheckBox(pro.getProperty("SelectproductSS"), "check", driver);				
			    			    
			    element = wait.until(new Function<WebDriver, WebElement>() {

					public WebElement apply(WebDriver webDriverArg) {
						// find the element
						return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentSelectProductsResultCount")));
					}
				});
			    
			    String resultText = element.getText();
			    String[] resultTextArray = resultText.split("of");
			    String resultSetTotalCntString = "";
//			    		,lastSavedSerialNo=""; 
			    for (String resultTextElement : resultTextArray) {
			        resultSetTotalCntString = resultTextElement;
			    }
			    int resultSetTotalCnt = Integer.parseInt(resultSetTotalCntString.trim());
			    
			    element = wait.until(new Function<WebDriver, WebElement>() {

					// apply method- which accept webdriver as input
//		    	    @Override
					public WebElement apply(WebDriver webDriverArg) {
						// find the element
						return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentAddButton")));
					}
				});
			    element.click();
			    
			    int adjTypeRowIndex =0,qtyRowIndex=0,wslocationlinkIndex=18;
//			    		beginingIndex=0;
			    WebElement adjustmentType = null,quantity=null,location=null,wslocationlink=null,batch=null,serial=null,quantity1=null,outQty=null,outSerial=null;
			    for (adjTypeRowIndex = 1; adjTypeRowIndex <= driver.findElements(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); adjTypeRowIndex++) {
			    	if (driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ adjTypeRowIndex + "]/div")).getText().equalsIgnoreCase("Adjustment Type")) {
						break;
					}
				}
			    for (qtyRowIndex = 1; qtyRowIndex <= driver.findElements(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); qtyRowIndex++) {
			    	if (driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ qtyRowIndex + "]/div")).getText().equalsIgnoreCase("Quantity")) {
						break;
					}
				}
			    for (int j = 1; j <= resultSetTotalCnt; j++) {							
			    	adjustmentType = driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[1]/div["+j+"]/table/tbody/tr/td["+ adjTypeRowIndex + "]/div"));
			    	adjustmentType.click();						
					Thread.sleep(2000);
					Robot r1 = new Robot();
					r1.keyPress(KeyEvent.VK_DOWN);
					r1.keyRelease(KeyEvent.VK_DOWN);
					Thread.sleep(1000);
					for (int i1 = 1; i1 <= driver.findElements(By.xpath(".//*[text()='Stock Sales']/parent::div/div")).size(); i1++) {
						if (driver.findElement(By.xpath(".//*[text()='Stock Sales']/parent::div[1]/div["+ i1 + "]")).getText().equalsIgnoreCase(adjustmentTypeValue)) {
							location = driver.findElement(By.xpath(".//*[text()='Stock Sales']/parent::div[1]/div["+ i1 + "]"));
							location.click();								
						}
					}
					Thread.sleep(1000);
				}
			    for (int j = 1; j <= resultSetTotalCnt; j++) {
			    	quantity = driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[1]/div["+j+"]/table/tbody/tr/td["+ qtyRowIndex + "]/div"));
			    	quantity.click();
			    	Thread.sleep(1000);
			    	Robot r2 = new Robot();
			    	r2.keyPress(KeyEvent.VK_CONTROL);
					r2.keyPress(KeyEvent.VK_A);
					r2.keyRelease(KeyEvent.VK_A);
					r2.keyRelease(KeyEvent.VK_CONTROL);
					r2.keyPress(KeyEvent.VK_DELETE);
					r2.keyRelease(KeyEvent.VK_DELETE);
					Utilities.sendText(quanityValue);
					Thread.sleep(1000);
					r2.keyPress(KeyEvent.VK_TAB);
					r2.keyRelease(KeyEvent.VK_TAB);
				}
			
//			    System.out.println("resultSetTotalCnt" + resultSetTotalCnt);
			    for (int j = 1; j <= resultSetTotalCnt; j++) {
			    	wslocationlink = driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div/div["+j+"]/table/tbody/tr/td["+ wslocationlinkIndex + "]/div/div"));
			    	Thread.sleep(1000);
			    	wslocationlink.click();	
			    	Thread.sleep(1000);
			    	if(adjustmentTypeValue.equalsIgnoreCase("Stock IN")) {
		  				for (int i = 1; i <= driver.findElements(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[1]/div/div/table/thead/tr/td")).size(); i++) {
							if (driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[1]/div/div/table/thead/tr/td["+ i + "]/div")).getText().equalsIgnoreCase("Location")) {
								location = driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[2]/div/div/table/tbody/tr/td["+ i + "]/div"));
								location.click();						
								Thread.sleep(1000);
								Robot locationRobot=new Robot();
					  			Utilities.sendText("Default Location");
					  			Thread.sleep(1000);
					  			locationRobot.keyPress(KeyEvent.VK_ENTER);
					  			locationRobot.keyRelease(KeyEvent.VK_ENTER);
					  			locationRobot.keyPress(KeyEvent.VK_ENTER);
					  			locationRobot.keyRelease(KeyEvent.VK_ENTER);
					  			Thread.sleep(1000);
							}
							if (driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[1]/div/div/table/thead/tr/td["+ i + "]/div")).getText().equalsIgnoreCase("Batch")) {
								batch = driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[2]/div/div/table/tbody/tr/td["+ i + "]/div"));
								batch.click();						
								Thread.sleep(1000);
								Robot batchRobot=new Robot();
					  			Utilities.sendText(batchValue);
					  			Thread.sleep(1000);
					  			batchRobot.keyPress(KeyEvent.VK_ENTER);
					  			batchRobot.keyRelease(KeyEvent.VK_ENTER);
					  			Thread.sleep(1000);
							}
							if (driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[1]/div/div/table/thead/tr/td["+ i + "]/div")).getText().equalsIgnoreCase("Quantity")) {
								quantity1 = driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[2]/div/div/table/tbody/tr/td["+ i + "]/div"));
								quantity1.click();						
								Thread.sleep(1000);
						    	Robot r2 = new Robot();
								r2.keyPress(KeyEvent.VK_CONTROL);
								r2.keyPress(KeyEvent.VK_A);
								r2.keyRelease(KeyEvent.VK_A);
								r2.keyRelease(KeyEvent.VK_CONTROL);
								r2.keyPress(KeyEvent.VK_DELETE);
								r2.keyRelease(KeyEvent.VK_DELETE);
								Utilities.sendText(quanityValue);
								Thread.sleep(2000);
								r2.keyPress(KeyEvent.VK_TAB);
								r2.keyRelease(KeyEvent.VK_TAB);
								
							}
							if (driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[1]/div/div/table/thead/tr/td["+ i + "]/div")).getText().equalsIgnoreCase("Serial")) {
							    for(int qtycnt=1;qtycnt<=Integer.parseInt(quanityValue);qtycnt++){
									serial = driver.findElement(By.xpath("//*[contains(@class,'x-window') and contains(@style,'visible')]//div/div/div/div/div[2]/div/div["+ qtycnt + "]/table/tbody/tr/td["+ i + "]/div"));
									Thread.sleep(1000);
									if(qtycnt!=1) {
										serial.click();
									}
									Thread.sleep(1000);						
									Robot r2 = new Robot();
									r2.keyPress(KeyEvent.VK_CONTROL);
									r2.keyPress(KeyEvent.VK_A);
									r2.keyRelease(KeyEvent.VK_A);
									r2.keyRelease(KeyEvent.VK_CONTROL);
									r2.keyPress(KeyEvent.VK_DELETE);
									r2.keyRelease(KeyEvent.VK_DELETE);
									Utilities.sendText(serialSeq+qtycnt);
									Thread.sleep(2000);
								}
								
								
							}
					    }
			  			
			  			element = wait.until(new Function<WebDriver, WebElement>() {
			  			// apply method- which accept webdriver as input
			  			//		    	    @Override
			  				public WebElement apply(WebDriver webDriverArg) {
			  				// find the element
			  				return webDriverArg.findElement(By.xpath(pro.getProperty("saveStockInQtyLocationButton")));
			  			}
			  			});
			  			element.click();
			  			Thread.sleep(500);
		  			} 
			    }
			    // ************** add price ********
			    
			    String xpathOfelement = "//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[1]/div[1]/table/tbody/tr//span[@class='pwnd delete-gridrow']";
				Utilities.justHover(xpathOfelement , driver);
				Thread.sleep(1000);
				
			    int indexOfPrice=0;
			    for (int i = 1; i <= driver.findElements(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); i++) {
			    	if (driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ i + "]/div")).getText().equalsIgnoreCase("Per Unit Price")) {
			    		indexOfPrice=i;
			    		System.out.println("> >> > >> index"+indexOfPrice );
					}
				}
			    
			    for (int j = 1; j <= resultSetTotalCnt; j++) {
			    	quantity = driver.findElement(By.xpath("//div[@id='markoutallmarkoutTab']/div/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[1]/div["+j+"]/table/tbody/tr/td["+ indexOfPrice + "]/div"));
			    	quantity.click();
			    	Thread.sleep(1000);
					Utilities.sendText(perUnitPrice);
					Thread.sleep(1000);
				}
			    //***** by Amol G. ******
			    
			    	element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {
							// find the element
							return webDriverArg.findElement(By.xpath(pro.getProperty("saveStockAdjustmentBtn")));
						}
					});
			    String mainWindow= driver.getWindowHandle();	
				element.click();
				Thread.sleep(2000);
							
				Utilities.clickButton("Yes", 300, driver);
				
				if(qaApprovalFlow==false){
					Utilities.clickButton("No", 1000, driver);
				}
				
				Thread.sleep(2000);
//IF QA FLOW ON
				if(adjustmentTypeValue.equalsIgnoreCase("Stock IN") && qaApprovalFlow){
					element = wait.until(new Function<WebDriver, WebElement>() {
						public WebElement apply(WebDriver webDriverArg) {							 
							return webDriverArg.findElement(By.xpath(".//*[@class='x-window-mc']/div/div/div[2]/span"));
						}
					});
				    if(element.getText().equalsIgnoreCase("Do you want this Stock In item(s) to go through QA Inspection Process?")){
//				    	System.out.println(" Do you want this Stock In item(s) to go through QA Inspection Process? Window Poped Up");
				    	element = wait.until(new Function<WebDriver, WebElement>() {

							// apply method- which accept webdriver as input
//				    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentQAFlowYesBtn")));
							}
						});
						element.click();
						
						Thread.sleep(2000);
						int serialColumnIndex=0,productColumnIndex=0,batchColumnIndex=0;
						StringBuilder stb=new StringBuilder();
						stb.append("Serial,Product,Batch");
						for (serialColumnIndex = 1; serialColumnIndex <= driver.findElements(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); serialColumnIndex++) {
					    	if (driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ serialColumnIndex + "]/div")).getText().equalsIgnoreCase("Serial")) {
					    		break;
							}
						}
						for (productColumnIndex = 1; productColumnIndex <= driver.findElements(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); productColumnIndex++) {
					    	if (driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ productColumnIndex + "]/div")).getText().equalsIgnoreCase("Product")) {
								break;
							}
						}
						for (batchColumnIndex = 1; batchColumnIndex <= driver.findElements(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td")).size(); batchColumnIndex++) {
					    	if (driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[1]/div/div/table/thead/tr/td["+ batchColumnIndex + "]/div")).getText().equalsIgnoreCase("Batch")) {
								break;
							}
						}
						
						List<String> StockAdjustmentForApprovalList = new ArrayList<String>();
						StockAdjustmentForApprovalList.add(stb.toString());
//						String[] selectStockAdjustmentForApprovalRecords = new String[Integer.parseInt(quanityValue)];
						for (int selectOutCount = 1; selectOutCount <=(Integer.parseInt(quanityValue)*2) ; selectOutCount++) {
							serial = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td[1]/div/div"));
							serial.click();
							String selectedSerialNoForApproval = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td["+ serialColumnIndex + "]/div")).getText();
							String selectedBatchNo = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td["+ batchColumnIndex + "]/div")).getText();
							String selectedProductID = driver.findElement(By.xpath(".//*[@id='approvalserialselectionwindowid']/div[2]/div[1]/div/div/div/div/div/div/div/div/div/div/div[1]/div[2]/div/div["+ selectOutCount + "]/table/tbody/tr/td["+ productColumnIndex + "]/div")).getText();
							stb.setLength(0);
							stb.append(selectedSerialNoForApproval).append(",").append(selectedProductID).append(",").append(selectedBatchNo);
							StockAdjustmentForApprovalList.add(stb.toString());
						}
						element = wait.until(new Function<WebDriver, WebElement>() {
							
							// apply method- which accept webdriver as input
		//		    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentQAFlowSaveBtn")));
							}
						});
						element.click();
						Thread.sleep(2000);
						
						WebElement buttonOk=new WebDriverWait(driver,40).until(ExpectedConditions.elementToBeClickable(By.xpath("//button[text()='OK']")));
						if(buttonOk.isDisplayed())
						{
							Thread.sleep(1000);
							String[] array = StockAdjustmentForApprovalList.toArray(new String[0]);
							writeSerialsToFile(documentid+"StockINApprovalserials"+Utilities.currentDate("dd-MM-yyyy")+".txt",array);						
														
							Utilities.clickButton("OK", 1000, driver);
							Thread.sleep(5000);
							
							try{
							Utilities.sikuliHandle("Print_Cancel");
							Thread.sleep(3000);}
							catch(Exception ex){
								
							}
							
							Set s=driver.getWindowHandles(); //this method will gives you the handles of all opened windows
							Iterator ite=s.iterator();

							while(ite.hasNext())
							{
							    String popupHandle=ite.next().toString();
							    if(!popupHandle.contains(mainWindow))
							    {
							        driver.switchTo().window(popupHandle);
							        driver.close(); //close print popup
							        driver.switchTo().window(mainWindow);
							        Thread.sleep(2000);
							        break;
							    }
							}
							 Thread.sleep(500);
				    }
				    }	
					System.out.println("******************* Stock IN (with QA) flow for [" + documentid + "] completed Successfully !! **********************");
					Thread.sleep(2500);
					Utilities.HoverandClick(pro.getProperty("StockAdjustmentCloseBtn"), driver);
				}
				
//	If QA flow is Off				
				else
				{					
					Utilities.clickButton("OK", 1000, driver);
					Thread.sleep(5000);
					
					try{
					Utilities.sikuliHandle("Print_Cancel");
					Thread.sleep(3000);}
					catch(Exception ex){
						
					}
					
					Set s=driver.getWindowHandles(); //this method will gives you the handles of all opened windows
					Iterator ite=s.iterator();

					while(ite.hasNext())
					{
					    String popupHandle=ite.next().toString();
					    if(!popupHandle.contains(mainWindow))
					    {
					        driver.switchTo().window(popupHandle);
					        driver.close(); //close print popup
					        driver.switchTo().window(mainWindow);
					        Thread.sleep(2000);
					        break;
					    }
					}
					 Thread.sleep(1500);
						System.out.println("******************* Stock IN test for [" + documentid + "] completed Successfully !! **********************");
						Thread.sleep(1000);
							
			  			element = wait.until(new Function<WebDriver, WebElement>() {
			  				public WebElement apply(WebDriver webDriverArg) {
			  				// find the element
			  				return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentCloseBtn")));
			  			}
			  			});
			  			element.click();
			  			Thread.sleep(1000);
				}
			    
			} catch (Exception EX) {
				System.out.println("*********************** Stock IN test for [" + documentid + "] Failed !!!!!!!!! ************************");
				Utilities.handleError(EX, driver);
//				EX.printStackTrace();
			}
		}
		
		// ********************************************************StockAdjustment Deletion*********************************************************
				public static void delete_StockAdjustment(String documentid,WebDriver driver) throws InterruptedException, AWTException, IOException {
				
					try {
						final Properties pro = Utilities.fetchProValue("OR_StockAdjustment.properties");
						

						Utilities.refresh();
						FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(5, TimeUnit.SECONDS).pollingEvery(2, TimeUnit.SECONDS);
					    WebElement element = wait.until(new Function<WebDriver, WebElement>() {

								// apply method- which accept webdriver as input
//					    	    @Override
								public WebElement apply(WebDriver webDriverArg) {
									// find the element
									return webDriverArg.findElement(By.xpath(pro.getProperty("InventoryExpander")));
								}
							});
					    element.click();
					    element = wait.until(new Function<WebDriver, WebElement>() {

							// apply method- which accept webdriver as input
//				    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("ReportsExpander")));
							}
						});
					    element.click();
					    Thread.sleep(1000);
					    element = wait.until(new Function<WebDriver, WebElement>() {

							// apply method- which accept webdriver as input
//				    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentRegisterLink")));
							}
						});
					    element.click();
					    Thread.sleep(2000);
					    WebElement search = wait.until(new Function<WebDriver, WebElement>() {

							// apply method- which accept webdriver as input
//				    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("QuickSearch")));
							}
						});
					    search.click();
					    Thread.sleep(1000);
					    search.sendKeys(documentid);
					    Thread.sleep(5000);
					    
					    element = wait.until(new Function<WebDriver, WebElement>() {

							// apply method- which accept webdriver as input
//				    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("DocumentCheckBox")));
							}
						});
					    element.click();
					    Thread.sleep(1000);
					    
					    Utilities.clickButton("Delete", 1000, driver);
					    Thread.sleep(2000);
					    
					    element = wait.until(new Function<WebDriver, WebElement>() {
							public WebElement apply(WebDriver webDriverArg) {
								return webDriverArg.findElement(By.xpath("//ul[@class='x-menu-list']/li[2]/a/img"));
							}
						});
					    element.click();
					    Thread.sleep(1000);
					    
					    Utilities.clickButton("Yes", 1000, driver);
					    Thread.sleep(500);
					    Utilities.clickButton("OK", 1000, driver);
						Thread.sleep(3000);
						
						try{
							search.clear();
							search.sendKeys(documentid);
							Thread.sleep(5000);			
							
							if(driver.findElement(By.xpath("//div[@id='markoutListmarkoutListDetailCmp']/div/div[3]/div/div")).getText().equalsIgnoreCase("No data to display"))
						    {
								System.out.println("Stock Adjustment ["+documentid+"]  is Deleted Successfully");
						    }
						    else
						    {
						    	System.out.println("Stock Adjustment ["+documentid+"]  is not Deleted Successfully");	
						    }
						}
						catch(Exception exp)
						{
							System.out.println("Stock Adjustment ["+documentid+"] is not Deleted deleted");
						}
						Thread.sleep(3000);
						element = wait.until(new Function<WebDriver, WebElement>() {

							// apply method- which accept webdriver as input
//				    	    @Override
							public WebElement apply(WebDriver webDriverArg) {
								// find the element
								return webDriverArg.findElement(By.xpath(pro.getProperty("StockAdjustmentRegisterCloseBtn")));
							}
						});
					    element.click();
					    Thread.sleep(1000);
						
						
					} catch (Exception EX) {
					  Utilities.handleError(EX, driver);
					}    
					}

	public static void writeSerialsToFile(String fileName, String[] serials)
			throws Exception {
		FileWriter fw = null;
		try {
			String dir = System.getProperty("user.dir");
			String directorypath= dir+"/test-output/"+fileName;
			File serialFile = new File(directorypath);
            // check if file exist, otherwise create the file before writing
            if (!serialFile.exists()) {
            	serialFile.createNewFile();
            }
			fw = new FileWriter(directorypath);
			for (int i = 0; i < serials.length; i++) {
				fw.write(serials[i] + "\n");
			}

		} catch (Exception exp) {
			exp.printStackTrace();
		} finally {
			fw.close();
		}
	}
	
	public static String[] readSerialsFromFile(String fileName)
			throws Exception {
		FileReader fr = null;
		String dir = System.getProperty("user.dir");
		String directorypath= dir+"/test-output/"+fileName;
		List<String> lines = new ArrayList<String>();
		BufferedReader bufferedReader = null;
		List<String> listWithoutDuplicates = null;
		try {
			File serialFile = new File(directorypath);
			if (serialFile!=null && serialFile.exists()) {
				fr = new FileReader(directorypath);
				bufferedReader = new BufferedReader(fr);
				
			    String line = null;
			    while ((line = bufferedReader.readLine()) != null) {
			            lines.add(line);
			    }
			    HashSet<String> listToSet = new HashSet<String>(lines);
			    listWithoutDuplicates = new ArrayList<String>(listToSet);
			}

		} catch (Exception exp) {
			exp.printStackTrace();
		} finally {
			if(bufferedReader!=null){
				bufferedReader.close();
			}
			if(fr!=null){
				fr.close();
			}
			
		}
		if(listWithoutDuplicates !=null){
			return listWithoutDuplicates.toArray(new String[listWithoutDuplicates.size()]);
		} else {
			return null;
		}
		
	}

//******************************** QA flow On or Off **************************
	
	public static void setting_QaFlow(String onoroff, WebDriver driver) throws InterruptedException, AWTException, IOException{
		
	try {
		
		
		final Properties pro = Utilities.fetchProValue("OR_SystemControls.properties");
		WebElement element=null;
		FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(5, TimeUnit.SECONDS).pollingEvery(2, TimeUnit.SECONDS);
		InvUtilities.enableExpander(driver);
		Utilities.HoverandClick(pro.getProperty("PreferencesExpander"), driver);
		Utilities.HoverandClick(pro.getProperty("SystemControlsLink"), driver);
		Thread.sleep(10000);

    //************************ if we want QA flow off **************************
	    
	    if(onoroff.equalsIgnoreCase("off")){
		    element = wait.until(new Function<WebDriver, WebElement>() {
				public WebElement apply(WebDriver webDriverArg) {
					// find the element
					return webDriverArg.findElement(By.xpath(pro.getProperty("StockINApprovalQAFlowCheckBox")));
				}
			});
		    if(element.isSelected()){
		    	Utilities.justHover(pro.getProperty("StockINApprovalQAFlowCheckBox"), driver);
		    	element.click();
		    	System.out.println("QA Approval Flow for STOCK IN is Deactivated");	
		    }
		    else{
		    	System.out.println("QA Approval Flow for STOCK IN is Already Deactivated");
		    }
	    }
	    
	    //********************* if we want QA flow ON********************************
	    else if(onoroff.equalsIgnoreCase("on"))
	    {
		    element = wait.until(new Function<WebDriver, WebElement>() {
				public WebElement apply(WebDriver webDriverArg) {
					// find the element
					return webDriverArg.findElement(By.xpath(pro.getProperty("StockINApprovalQAFlowCheckBox")));
				}
			});
		    if(element.isSelected()){
		    	System.out.println("QA Approval Flow for STOCK IN is already Activated");	
		    }
		    else{
		    	Utilities.justHover(pro.getProperty("StockINApprovalQAFlowCheckBox"), driver);
		    	element.click();
		    	System.out.println("QA Approval Flow for STOCK IN is NOW Activated");
		    }
	    }
    
		    element = wait.until(new Function<WebDriver, WebElement>() {
				public WebElement apply(WebDriver webDriverArg) {
					return webDriverArg.findElement(By.xpath(pro.getProperty("saveAccountPreferencesBtn")));
				}
			});
			element.click();
			Thread.sleep(1000);
			
			Utilities.HoverandClick(pro.getProperty("applyNewsettingsBtn"), driver);			
			Utilities.clickButton("OK", 2000, driver);
			Thread.sleep(2000);
	
	} catch (Exception EX) {;
		Utilities.handleError(EX, driver);
	}
}

}
